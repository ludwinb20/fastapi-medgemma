[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "AutoProcessor",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoModelForCausalLM",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "UnidentifiedImageError",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "firebase_admin",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "credentials",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class AnalysisResult(BaseModel):\n    result: str\n    model: str = \"medgemma-4b-it\"\n    processing_time: Optional[float] = None\n# Nuevos modelos para los endpoints\nclass TextProcessRequest(BaseModel):\n    prompt: str\n    context: Optional[str] = None\nclass ImageProcessRequest(BaseModel):\n    imageDataUri: str",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "TextProcessRequest",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class TextProcessRequest(BaseModel):\n    prompt: str\n    context: Optional[str] = None\nclass ImageProcessRequest(BaseModel):\n    imageDataUri: str\n    prompt: str\nclass ProcessResponse(BaseModel):\n    response: str\n    tokens_used: int\n    success: bool",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ImageProcessRequest",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class ImageProcessRequest(BaseModel):\n    imageDataUri: str\n    prompt: str\nclass ProcessResponse(BaseModel):\n    response: str\n    tokens_used: int\n    success: bool\n# Cargar el modelo (con manejo de errores)\ntry:\n    HF_TOKEN = os.getenv(\"HF_TOKEN\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ProcessResponse",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class ProcessResponse(BaseModel):\n    response: str\n    tokens_used: int\n    success: bool\n# Cargar el modelo (con manejo de errores)\ntry:\n    HF_TOKEN = os.getenv(\"HF_TOKEN\")\n    if not HF_TOKEN:\n        raise ValueError(\"HF_TOKEN no est√° configurado\")\n    logger.info(\"Cargando modelo MedGemma...\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "logger = logging.getLogger(__name__)\napp = FastAPI(title=\"Medical Image Analysis API\", version=\"1.0\")\n# Inicializar Firebase Admin\ntry:\n    # Puedes usar una variable de entorno para la ruta del archivo\n    service_account_path = os.getenv(\"FIREBASE_SERVICE_ACCOUNT_PATH\", \"serviceAccountKey.json\")\n    cred = credentials.Certificate(service_account_path)\n    firebase_admin.initialize_app(cred)\n    logger.info(\"Firebase Admin inicializado correctamente\")\nexcept Exception as e:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(title=\"Medical Image Analysis API\", version=\"1.0\")\n# Inicializar Firebase Admin\ntry:\n    # Puedes usar una variable de entorno para la ruta del archivo\n    service_account_path = os.getenv(\"FIREBASE_SERVICE_ACCOUNT_PATH\", \"serviceAccountKey.json\")\n    cred = credentials.Certificate(service_account_path)\n    firebase_admin.initialize_app(cred)\n    logger.info(\"Firebase Admin inicializado correctamente\")\nexcept Exception as e:\n    logger.error(f\"Error al inicializar Firebase Admin: {str(e)}\")",
        "detail": "main",
        "documentation": {}
    }
]